<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mybatis.mapper.EmpMapper">

    <!-- List<Emp> getAllEmp();
        当字段名和属性名不一致时可以使用别名
     -->
    <select id="getAllEmpOld" resultType="Emp">
        <!-- select eid,emp_name empName,age,sex,email from t_emp; -->
        select * from t_emp;
    </select>
    


    <!--
         resultMap：设置自定义关系
         id：唯一标识，不能重复
         type：映射关系中的实体类类型
         子标签：id：主键的映射
                result：普通的映射
         属性：
                property：设置映射关系中的属性名，必须是type属性所设置的实体类的属性名
                column：SQL语句查询出的字段名
    -->
    <resultMap id="empResultMap" type="Emp">
        <id property="eid" column="eid"></id>
        <result property="empName" column="emp_name"></result>
        <result property="age" column="age"></result>
        <result property="sex" column="sex"></result>
        <result property="email" column="email"></result>
    </resultMap>
    <select id="getAllEmp" resultMap="empResultMap">
        select * from t_emp;
    </select>
    

    
    <!-- Emp getEmpAndDept();
         多表查询：级联属性赋值
    -->
    <resultMap id="empAndDeptResultMap" type="Emp">
        <id property="eid" column="eid"></id>
        <result property="empName" column="emp_name"></result>
        <result property="age" column="age"></result>
        <result property="sex" column="sex"></result>
        <result property="email" column="email"></result>
        <result property="dept.did" column="did"></result>
        <result property="dept.deptName" column="dept_name"></result>
    </resultMap>
    <select id="getEmpAndDept" resultMap="empAndDeptResultMap">
        select * from t_emp left join t_dept on t_emp.did = t_dept.did where t_emp.did = #{id};
    </select>




    <!-- List<Emp> getEmpAndDeptTwo(@Param("id") Integer id );
        association标签：专门处理多对一的映射关系
    -->
    <resultMap id="empAndDeptResultMapTwo" type="Emp">
        <id property="eid" column="eid"></id>
        <result property="empName" column="emp_name"></result>
        <result property="age" column="age"></result>
        <result property="sex" column="sex"></result>
        <result property="email" column="email"></result>
        <!--association：专门处理多对一的映射关系 -->
        <association property="dept" javaType="Dept">
            <id property="did" column="did"></id>
            <result property="deptName" column="dept_name"></result>
        </association>
    </resultMap>
    <select id="getEmpAndDeptTwo" resultMap="empAndDeptResultMapTwo">
        select * from t_emp left join t_dept on t_emp.did = t_dept.did where t_emp.did = #{id};
    </select>
    
    
    
    <!--
            List<Emp> getEmpAndDeptByStepOne(@Param("id") Integer id );
            分布查询第一步
    -->

    <resultMap id="empAndDeptByStep" type="Emp">
        <id property="eid" column="eid"></id>
        <result property="empName" column="emp_name"></result>
        <result property="age" column="age"></result>
        <result property="sex" column="sex"></result>
        <result property="email" column="email"></result>
        <!--
               select：设置分布查询SQL的唯一标识
               column：设置分布查询的条件
               fetchType：当开启了全局的延迟加载之后，可通过此属性手动控制延迟加载的效果
                        eager：立即加载，让此方法不延迟加载
                        lazy：延迟加载
        -->
        <association property="dept"
                     select="mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo"
                     column="did"
                     fetchType="eager"
        >
        </association>
    </resultMap>
    <select id="getEmpAndDeptByStepOne" resultMap="empAndDeptByStep">
        select * from t_emp where eid = #{id};
    </select>
    
    
    
    <!-- 
            List<Emp> getDeptAndEmpByStepTwo(@Param("did") Integer did);
    -->
    <select id="getDeptAndEmpByStepTwo" resultType="Emp">
        select * from t_emp where did = #{did};
    </select>
    
    
    
    
</mapper>